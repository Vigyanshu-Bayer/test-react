{"ast":null,"code":"// import React, {  useState } from 'react';\n// import axios from 'axios';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import './App.css';\n// import Header from './Component/header';\n// import FileUpload from './Component/FileUpload';\n// import { Spinner } from 'react-bootstrap';\n// import Toast from 'react-bootstrap/Toast';\n// import Modal from 'react-bootstrap/Modal';\n// import Footer from './Component/Footer';\n// // import Response from './Component/Response';\n// function App() {\n//   const [loader, setLoader] = useState(false);\n//   const [resType, setResType] = useState(\"review\");\n//   const [activeTab, setActiveTab] = useState(\"test-case-generation\"); // Default tab is now Test Case Generation\n//   const [notification, setNotification] = useState({\n//     show: false,\n//     body: \"\"\n//   });\n//   const [response,setResponse] = useState([])\n//   const [suggestions,setSuggestions] = useState([])\n//   // States for Code Generation and Code Conversion\n//   const [codeGenForm, setCodeGenForm] = useState({\n//     technologyType: '',\n//     framework: '',\n//     repositoryUrl: '',\n//     userRequirement: ''\n//   });\n//   const [codeConvForm, setCodeConvForm] = useState({\n//     technologyType: '',\n//     sourceLanguage: '',\n//     destinationLanguage: '',\n//     repositoryUrl: '',\n//     additionalInstructions: ''\n//   });\n//   // Modal states for Code Generation and Code Conversion results\n//   const [codeGenModalShow, setCodeGenModalShow] = useState(false);\n//   const [codeConvModalShow, setCodeConvModalShow] = useState(false);\n//   const [codeGenResult, setCodeGenResult] = useState('');\n//   const [codeConvResult, setCodeConvResult] = useState('');\n//   // Framework options based on technology type\n//   const frameworkOptions = {\n//     Frontend: ['React', 'Vue', 'JavaScript', 'Angular', 'HTML', 'CSS'],\n//     Backend: ['Python', 'Java', 'ASP.NET', 'Django', 'Node.js', 'Spring Boot', 'PHP', 'Flask'],\n//     Database: ['Oracle', 'PostgreSQL', 'MySQL', 'MongoDB', 'Redis', 'SQLite']\n//   };\n//   // const [apiResponse, setApiResponse] = useState([]);\n//   const handleSubmit = (data, type, project_name, assigned_to, testCaseType) => {\n//     //event.preventDefault();\n//     console.log(data)\n//     if (data.file.length) {\n//       setLoader(true);\n//       let postData = {\n//         user_story_description: data.userStory,\n//         file: data.file,\n//         application_type: type,\n//         project_name: project_name,\n//         assigned_to: assigned_to\n//       }\n//       if(testCaseType === 'existing'){\n//         postData.testCaseType = testCaseType;\n//         postData.existingFile = data.existingFile;\n//       }\n//       axios.post(`http://10.31.3.17:5000/generate-test-cases`, postData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//           'accept': '*/*'\n//         }\n//       })\n//         .then(res => {\n//           console.log(res)\n//           setLoader(false);\n//           if(res.status === 200){\n//             setNotification({\n//               show:true,\n//               body:res.data.message,\n//               type:'success'\n//             })\n//             setResponse(res.data.test_cases)\n//             setSuggestions(res.data.suggestions)\n//             setResponseShow(true)\n//           }else{\n//             setNotification({\n//               show:true,\n//               body:\"Something went wrong !!\",\n//               type:'danger'\n//             })\n//           }\n//         })\n//     }\n//   }\n//   // Handle Code Generation form submission\n//   const handleCodeGenSubmit = (e) => {\n//     e.preventDefault();\n//     setLoader(true);\n//     // Simulate API call - Replace this with your actual API call\n//     setTimeout(() => {\n//       setLoader(false);\n//       // Mock response - Replace with actual API response\n//       const mockResult = `// Generated ${codeGenForm.framework} code for ${codeGenForm.technologyType}\\n\\n` +\n//         `// Technology: ${codeGenForm.technologyType}\\n` +\n//         `// Framework: ${codeGenForm.framework}\\n` +\n//         `// Repository: ${codeGenForm.repositoryUrl}\\n\\n` +\n//         `// User Requirements:\\n// ${codeGenForm.userRequirement}\\n\\n` +\n//         `// Generated Code:\\nfunction generatedCode() {\\n  // Your generated code will appear here\\n  console.log('Code generated successfully!');\\n}\\n\\nmodule.exports = generatedCode;`;\n//       setCodeGenResult(mockResult);\n//       setCodeGenModalShow(true);\n//       setNotification({\n//         show: true,\n//         body: \"Code generated successfully!\",\n//         type: 'success'\n//       });\n//     }, 2000);\n//   };\n//   // Handle technology type change and reset framework for Code Generation\n//   const handleTechnologyChange = (value) => {\n//     setCodeGenForm({\n//       ...codeGenForm,\n//       technologyType: value,\n//       framework: '' // Reset framework when technology type changes\n//     });\n//   };\n//   // Handle technology type change for Code Conversion\n//   const handleConvTechnologyChange = (value) => {\n//     setCodeConvForm({\n//       ...codeConvForm,\n//       technologyType: value,\n//       sourceLanguage: '',\n//       destinationLanguage: ''\n//     });\n//   };\n//   // Handle source language change for Code Conversion\n//   const handleSourceLanguageChange = (value) => {\n//     setCodeConvForm({\n//       ...codeConvForm,\n//       sourceLanguage: value,\n//       destinationLanguage: '' // Reset destination language when source changes\n//     });\n//   };\n//   // Get destination language options (exclude selected source language)\n//   const getDestinationOptions = () => {\n//     if (!codeConvForm.technologyType || !codeConvForm.sourceLanguage) {\n//       return [];\n//     }\n//     return frameworkOptions[codeConvForm.technologyType].filter(\n//       option => option !== codeConvForm.sourceLanguage\n//     );\n//   };\n//   // Handle Code Conversion form submission\n//   const handleCodeConvSubmit = (e) => {\n//     e.preventDefault();\n//     setLoader(true);\n//     // Simulate API call - Replace this with your actual API call\n//     setTimeout(() => {\n//       setLoader(false);\n//       // Mock response - Replace with actual API response\n//       const mockResult = `// Code Conversion Result\\n\\n` +\n//         `// Technology Type: ${codeConvForm.technologyType}\\n` +\n//         `// Source Language: ${codeConvForm.sourceLanguage}\\n` +\n//         `// Destination Language: ${codeConvForm.destinationLanguage}\\n` +\n//         `// Repository: ${codeConvForm.repositoryUrl}\\n\\n` +\n//         `// Additional Instructions:\\n// ${codeConvForm.additionalInstructions}\\n\\n` +\n//         `// Converted Code:\\n// Original ${codeConvForm.sourceLanguage} code has been converted to ${codeConvForm.destinationLanguage}\\n\\n` +\n//         `function convertedCode() {\\n  // Your converted code will appear here\\n  console.log('Code converted from ${codeConvForm.sourceLanguage} to ${codeConvForm.destinationLanguage}!');\\n}\\n\\nexport default convertedCode;`;\n//       setCodeConvResult(mockResult);\n//       setCodeConvModalShow(true);\n//       setNotification({\n//         show: true,\n//         body: \"Code converted successfully!\",\n//         type: 'success'\n//       });\n//     }, 2000);\n//   };\n//   const download = () =>{\n//     setLoader(true);\n//     axios.post(`http://10.31.3.17:5000/download-test-cases`, [], {\n//             responseType: 'blob'\n//         }).then(res => {\n//                 setLoader(false);\n//                 if(res.status === 200){\n//                   const url = window.URL.createObjectURL(new Blob([res.data], {type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"}));\n//                   const link = document.createElement('a');\n//                   link.href = url;\n//                   link.setAttribute('download', 'test_cases.xlsx'); // Name of the file to be downloaded\n//                   document.body.appendChild(link);\n//                   link.click();\n//                   link.remove();\n//                   setNotification({\n//                     show:true,\n//                     body:\"Downloaded Successfully\",\n//                     type:'success'\n//                   })\n//                 }else{\n//                   setNotification({\n//                     show:true,\n//                     body:\"Something went wrong !!\",\n//                     type:'danger'\n//                   })\n//                 }\n//               })\n//   }\n//   const [responseShow, setResponseShow] = useState(false);\n//   const handleResClose = () => setResponseShow(false);\n//   const handleCodeGenClose = () => setCodeGenModalShow(false);\n//   const handleCodeConvClose = () => setCodeConvModalShow(false);\n//   // Code Generation Content Component\n//   const CodeGenerationContent = () => (\n//     <div className=\"code-generation-content\">\n//       <form className=\"code-tab-form\" onSubmit={handleCodeGenSubmit}>\n//         {/* Row with two dropdowns */}\n//         <div className=\"formRow\">\n//           <div>\n//             <label className=\"formLabel\">Select Technology Type:</label>\n//             <select\n//               className=\"formfield_select input_dark\"\n//               value={codeGenForm.technologyType}\n//               onChange={(e) => handleTechnologyChange(e.target.value)}\n//               required\n//             >\n//               <option value=\"\">Select Technology Type</option>\n//               <option value=\"Frontend\">Frontend</option>\n//               <option value=\"Backend\">Backend</option>\n//               <option value=\"Database\">Database</option>\n//             </select>\n//           </div>\n//           <div>\n//             <label className=\"formLabel\">Select Framework/Code Language:</label>\n//             <select\n//               className=\"formfield_select input_dark\"\n//               value={codeGenForm.framework}\n//               onChange={(e) => setCodeGenForm({...codeGenForm, framework: e.target.value})}\n//               required\n//               disabled={!codeGenForm.technologyType}\n//             >\n//               <option value=\"\">Select Framework/Language</option>\n//               {codeGenForm.technologyType && frameworkOptions[codeGenForm.technologyType].map((option, index) => (\n//                 <option key={index} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//         </div>\n//         {/* Repository URL field */}\n//         <div>\n//           <label className=\"formLabel\">Repository Url/Name:</label>\n//           <input\n//             type=\"text\"\n//             className=\"formfield_select input_dark\"\n//             value={codeGenForm.repositoryUrl}\n//             onChange={(e) => setCodeGenForm({...codeGenForm, repositoryUrl: e.target.value})}\n//             placeholder=\"Enter repository URL or name...\"\n//           />\n//         </div>\n//         {/* User Requirement field */}\n//         <div>\n//           <label className=\"formLabel\">User Requirement:</label>\n//           <textarea\n//             className=\"formfield_ta input_dark\"\n//             value={codeGenForm.userRequirement}\n//             onChange={(e) => setCodeGenForm({...codeGenForm, userRequirement: e.target.value})}\n//             placeholder=\"Enter your requirements...\"\n//             required\n//             rows=\"8\"\n//           />\n//         </div>\n//         {/* Generate button */}\n//         <div>\n//           <button type=\"submit\" className=\"btn btn-primary formButton\">\n//             Generate\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n//   // Code Conversion Content Component\n//   const CodeConversionContent = () => (\n//     <div className=\"code-conversion-content\">\n//       <form className=\"code-tab-form\" onSubmit={handleCodeConvSubmit}>\n//         {/* Technology Type dropdown */}\n//         <div>\n//           <label className=\"formLabel\">Select Technology Type:</label>\n//           <select\n//             className=\"formfield_select input_dark\"\n//             value={codeConvForm.technologyType}\n//             onChange={(e) => handleConvTechnologyChange(e.target.value)}\n//             required\n//           >\n//             <option value=\"\">Select Technology Type</option>\n//             <option value=\"Frontend\">Frontend</option>\n//             <option value=\"Backend\">Backend</option>\n//             <option value=\"Database\">Database</option>\n//           </select>\n//         </div>\n//         {/* Row with Source and Destination Language dropdowns */}\n//         <div className=\"formRow\">\n//           <div>\n//             <label className=\"formLabel\">Source Language:</label>\n//             <select\n//               className=\"formfield_select input_dark\"\n//               value={codeConvForm.sourceLanguage}\n//               onChange={(e) => handleSourceLanguageChange(e.target.value)}\n//               required\n//               disabled={!codeConvForm.technologyType}\n//             >\n//               <option value=\"\">Select Source Language</option>\n//               {codeConvForm.technologyType && frameworkOptions[codeConvForm.technologyType].map((option, index) => (\n//                 <option key={index} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div>\n//             <label className=\"formLabel\">Destination Language:</label>\n//             <select\n//               className=\"formfield_select input_dark\"\n//               value={codeConvForm.destinationLanguage}\n//               onChange={(e) => setCodeConvForm({...codeConvForm, destinationLanguage: e.target.value})}\n//               required\n//               disabled={!codeConvForm.sourceLanguage}\n//             >\n//               <option value=\"\">Select Destination Language</option>\n//               {getDestinationOptions().map((option, index) => (\n//                 <option key={index} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//         </div>\n//         {/* Repository URL field */}\n//         <div>\n//           <label className=\"formLabel\">Repository Url/Name:</label>\n//           <input\n//             type=\"text\"\n//             className=\"formfield_select input_dark\"\n//             value={codeConvForm.repositoryUrl}\n//             onChange={(e) => setCodeConvForm({...codeConvForm, repositoryUrl: e.target.value})}\n//             placeholder=\"Enter repository URL or name...\"\n//           />\n//         </div>\n//         {/* Additional Instructions field - MADE SHORTER */}\n//         <div>\n//           <label className=\"formLabel\">Add Your Additional Instructions:</label>\n//           <textarea\n//             className=\"formfield_select input_dark\"\n//             value={codeConvForm.additionalInstructions}\n//             onChange={(e) => setCodeConvForm({...codeConvForm, additionalInstructions: e.target.value})}\n//             placeholder=\"Enter your additional instructions...\"\n//             rows=\"3\"\n//             style={{height: 'auto', minHeight: '80px'}}\n//           />\n//         </div>\n//         {/* Convert button */}\n//         <div>\n//           <button type=\"submit\" className=\"btn btn-primary formButton\">\n//             Convert\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n//   console.log(loader,\"loader\")\n//   return (\n//     <>\n//       <Header />\n//       <Toast className=\"d-inline-block m-1 toast\" bg={notification.type} onClose={() => setNotification(prevState =>( { ...prevState,show:false }))} show={notification.show} position=\"top-end\" autohide>\n//         <Toast.Header>\n//           <strong className=\"me-auto\">Success</strong>\n//         </Toast.Header>\n//         <Toast.Body className='text-white'>{notification.body}</Toast.Body>\n//       </Toast>\n//       {/* Main Tab Navigation */}\n//       <div className=\"main-tabs\">\n//         <ul className=\"nav nav-tabs\">\n//           <li className=\"nav-item\">\n//             <button \n//               className={`nav-link ${activeTab === 'test-case-generation' ? 'active' : ''}`}\n//               onClick={() => setActiveTab('test-case-generation')}\n//             >\n//               Test Case Generation\n//             </button>\n//           </li>\n//           <li className=\"nav-item\">\n//             <button \n//               className={`nav-link ${activeTab === 'code-generation' ? 'active' : ''}`}\n//               onClick={() => setActiveTab('code-generation')}\n//             >\n//               Code Generation\n//             </button>\n//           </li>\n//           <li className=\"nav-item\">\n//             <button \n//               className={`nav-link ${activeTab === 'code-conversion' ? 'active' : ''}`}\n//               onClick={() => setActiveTab('code-conversion')}\n//             >\n//               Code Conversion\n//             </button>\n//           </li>\n//         </ul>\n//       </div>\n//       {/* Tab Content */}\n//       <div className=\"tab-content-wrapper\">\n//         {activeTab === 'test-case-generation' && (\n//           <div className=\"test-case-gen-content\">\n//             <FileUpload handleSubmit={handleSubmit} setNotification={setNotification} />\n//           </div>\n//         )}\n//         {activeTab === 'code-generation' && <CodeGenerationContent />}\n//         {activeTab === 'code-conversion' && <CodeConversionContent />}\n//       </div>\n//       {loader && (<div style={{position: \"absolute\",width: \"100vw\",height: \"100vh\",zIndex: 30,top: 0,'backgroundColor': \"#00000082\"}}>\n//         <div className=\"text-center mt-4\" style={{position: 'relative',top:'50%'}}>\n//           <Spinner animation=\"border\" role=\"status\">\n//             <span className=\"visually-hidden\">Loading...</span>\n//           </Spinner>\n//         </div>\n//       </div>)}\n//       {\n//         // (uploadedFiles.length)?<Response apiResponse={apiResponse}/> : <FileUpload uploadedFiles={uploadedFiles} setUploadedFiles={setUploadedFiles}/>\n//       }\n//       {/* <!--Test Case Response Modal --> */}\n//       <Modal show={responseShow} size='xl' onHide={handleResClose} dialogClassName=\"formbody_dark modal_body\" backdrop=\"static\"\n//         keyboard={false}>\n//         <Modal.Header>\n//           <Modal.Title>\n//           <ul className=\"nav nav-tabs Restab\">\n//                 <li className=\"nav-item\">\n//                     <label className={\"nav-link\" + (resType === 'review'? \" active\":\"\")} aria-current=\"page\" onClick={e=>setResType('review')}>Review</label>\n//                 </li>\n//                 <li className=\"nav-item\">\n//                     <label className={\"nav-link\" + (resType === 'suggestions'? \" active\":\"\")} onClick={e=>setResType('suggestions')}>Suggestions</label>\n//                 </li>\n//             </ul>\n//           </Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//             {(resType === 'review') && <table className='resTable'>\n//                 <thead>\n//                     <tr>\n//                         <th>Title</th>\n//                         <th style={{width: '10%'}}>Test Step</th>\n//                         <th>Step Actions</th>\n//                         <th>Steps Expected</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {response.map((ele,key)=>{\n//                       return(<tr key={key}>\n//                         <td>{ele.Title}</td>\n//                         <td>{ele['Test Step']}</td>\n//                         <td>{ele['Step Action']}</td>\n//                         <td>{ele['Step Expected']}</td>\n//                       </tr>)\n//                     })}\n//                 </tbody>    \n//             </table>}\n//             {(resType === 'suggestions') && <div><pre className='textWrap'>{suggestions.map((e, index) => <React.Fragment key={index}>{e.suggestion + \"\\n\"}</React.Fragment>)}</pre></div>}\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <button className=\"btn btn-primary\" onClick={e=>download()}>\n//             Download\n//           </button>\n//           <button className=\"btn btn-secondary\" onClick={handleResClose}>\n//             Close\n//           </button>\n//         </Modal.Footer>\n//       </Modal>\n//       {/* Code Generation Result Modal */}\n//       <Modal show={codeGenModalShow} size='xl' onHide={handleCodeGenClose} dialogClassName=\"formbody_dark modal_body\" backdrop=\"static\" keyboard={false}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Code Generation Result</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <pre className='textWrap' style={{backgroundColor: '#1e1e1e', color: '#d4d4d4', padding: '20px', borderRadius: '5px', fontSize: '14px', fontFamily: 'Consolas, Monaco, monospace'}}>{codeGenResult}</pre>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <button className=\"btn btn-secondary\" onClick={handleCodeGenClose}>\n//             Close\n//           </button>\n//         </Modal.Footer>\n//       </Modal>\n//       {/* Code Conversion Result Modal */}\n//       <Modal show={codeConvModalShow} size='xl' onHide={handleCodeConvClose} dialogClassName=\"formbody_dark modal_body\" backdrop=\"static\" keyboard={false}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Code Conversion Result</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <pre className='textWrap' style={{backgroundColor: '#1e1e1e', color: '#d4d4d4', padding: '20px', borderRadius: '5px', fontSize: '14px', fontFamily: 'Consolas, Monaco, monospace'}}>{codeConvResult}</pre>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <button className=\"btn btn-secondary\" onClick={handleCodeConvClose}>\n//             Close\n//           </button>\n//         </Modal.Footer>\n//       </Modal>\n//       <Footer></Footer>\n//     </>\n//   );\n// }\n// export default App;\nimport React from\"react\";import\"./App.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Hello, React!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This is a basic React app.\"})]});}export default App;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","App","className","children"],"sources":["/workspaces/test-react/src/App.js"],"sourcesContent":["// import React, {  useState } from 'react';\n// import axios from 'axios';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import './App.css';\n// import Header from './Component/header';\n// import FileUpload from './Component/FileUpload';\n// import { Spinner } from 'react-bootstrap';\n// import Toast from 'react-bootstrap/Toast';\n// import Modal from 'react-bootstrap/Modal';\n// import Footer from './Component/Footer';\n// // import Response from './Component/Response';\n\n// function App() {\n//   const [loader, setLoader] = useState(false);\n//   const [resType, setResType] = useState(\"review\");\n//   const [activeTab, setActiveTab] = useState(\"test-case-generation\"); // Default tab is now Test Case Generation\n//   const [notification, setNotification] = useState({\n//     show: false,\n//     body: \"\"\n//   });\n//   const [response,setResponse] = useState([])\n//   const [suggestions,setSuggestions] = useState([])\n  \n//   // States for Code Generation and Code Conversion\n//   const [codeGenForm, setCodeGenForm] = useState({\n//     technologyType: '',\n//     framework: '',\n//     repositoryUrl: '',\n//     userRequirement: ''\n//   });\n  \n//   const [codeConvForm, setCodeConvForm] = useState({\n//     technologyType: '',\n//     sourceLanguage: '',\n//     destinationLanguage: '',\n//     repositoryUrl: '',\n//     additionalInstructions: ''\n//   });\n\n//   // Modal states for Code Generation and Code Conversion results\n//   const [codeGenModalShow, setCodeGenModalShow] = useState(false);\n//   const [codeConvModalShow, setCodeConvModalShow] = useState(false);\n//   const [codeGenResult, setCodeGenResult] = useState('');\n//   const [codeConvResult, setCodeConvResult] = useState('');\n\n//   // Framework options based on technology type\n//   const frameworkOptions = {\n//     Frontend: ['React', 'Vue', 'JavaScript', 'Angular', 'HTML', 'CSS'],\n//     Backend: ['Python', 'Java', 'ASP.NET', 'Django', 'Node.js', 'Spring Boot', 'PHP', 'Flask'],\n//     Database: ['Oracle', 'PostgreSQL', 'MySQL', 'MongoDB', 'Redis', 'SQLite']\n//   };\n\n//   // const [apiResponse, setApiResponse] = useState([]);\n//   const handleSubmit = (data, type, project_name, assigned_to, testCaseType) => {\n//     //event.preventDefault();\n//     console.log(data)\n//     if (data.file.length) {\n//       setLoader(true);\n//       let postData = {\n//         user_story_description: data.userStory,\n//         file: data.file,\n//         application_type: type,\n//         project_name: project_name,\n//         assigned_to: assigned_to\n//       }\n//       if(testCaseType === 'existing'){\n//         postData.testCaseType = testCaseType;\n//         postData.existingFile = data.existingFile;\n//       }\n//       axios.post(`http://10.31.3.17:5000/generate-test-cases`, postData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//           'accept': '*/*'\n//         }\n//       })\n//         .then(res => {\n//           console.log(res)\n//           setLoader(false);\n//           if(res.status === 200){\n//             setNotification({\n//               show:true,\n//               body:res.data.message,\n//               type:'success'\n//             })\n//             setResponse(res.data.test_cases)\n//             setSuggestions(res.data.suggestions)\n//             setResponseShow(true)\n//           }else{\n//             setNotification({\n//               show:true,\n//               body:\"Something went wrong !!\",\n//               type:'danger'\n//             })\n//           }\n          \n//         })\n      \n\n//     }\n//   }\n\n//   // Handle Code Generation form submission\n//   const handleCodeGenSubmit = (e) => {\n//     e.preventDefault();\n//     setLoader(true);\n    \n//     // Simulate API call - Replace this with your actual API call\n//     setTimeout(() => {\n//       setLoader(false);\n//       // Mock response - Replace with actual API response\n//       const mockResult = `// Generated ${codeGenForm.framework} code for ${codeGenForm.technologyType}\\n\\n` +\n//         `// Technology: ${codeGenForm.technologyType}\\n` +\n//         `// Framework: ${codeGenForm.framework}\\n` +\n//         `// Repository: ${codeGenForm.repositoryUrl}\\n\\n` +\n//         `// User Requirements:\\n// ${codeGenForm.userRequirement}\\n\\n` +\n//         `// Generated Code:\\nfunction generatedCode() {\\n  // Your generated code will appear here\\n  console.log('Code generated successfully!');\\n}\\n\\nmodule.exports = generatedCode;`;\n      \n//       setCodeGenResult(mockResult);\n//       setCodeGenModalShow(true);\n      \n//       setNotification({\n//         show: true,\n//         body: \"Code generated successfully!\",\n//         type: 'success'\n//       });\n//     }, 2000);\n//   };\n\n//   // Handle technology type change and reset framework for Code Generation\n//   const handleTechnologyChange = (value) => {\n//     setCodeGenForm({\n//       ...codeGenForm,\n//       technologyType: value,\n//       framework: '' // Reset framework when technology type changes\n//     });\n//   };\n\n//   // Handle technology type change for Code Conversion\n//   const handleConvTechnologyChange = (value) => {\n//     setCodeConvForm({\n//       ...codeConvForm,\n//       technologyType: value,\n//       sourceLanguage: '',\n//       destinationLanguage: ''\n//     });\n//   };\n\n//   // Handle source language change for Code Conversion\n//   const handleSourceLanguageChange = (value) => {\n//     setCodeConvForm({\n//       ...codeConvForm,\n//       sourceLanguage: value,\n//       destinationLanguage: '' // Reset destination language when source changes\n//     });\n//   };\n\n//   // Get destination language options (exclude selected source language)\n//   const getDestinationOptions = () => {\n//     if (!codeConvForm.technologyType || !codeConvForm.sourceLanguage) {\n//       return [];\n//     }\n//     return frameworkOptions[codeConvForm.technologyType].filter(\n//       option => option !== codeConvForm.sourceLanguage\n//     );\n//   };\n\n//   // Handle Code Conversion form submission\n//   const handleCodeConvSubmit = (e) => {\n//     e.preventDefault();\n//     setLoader(true);\n    \n//     // Simulate API call - Replace this with your actual API call\n//     setTimeout(() => {\n//       setLoader(false);\n//       // Mock response - Replace with actual API response\n//       const mockResult = `// Code Conversion Result\\n\\n` +\n//         `// Technology Type: ${codeConvForm.technologyType}\\n` +\n//         `// Source Language: ${codeConvForm.sourceLanguage}\\n` +\n//         `// Destination Language: ${codeConvForm.destinationLanguage}\\n` +\n//         `// Repository: ${codeConvForm.repositoryUrl}\\n\\n` +\n//         `// Additional Instructions:\\n// ${codeConvForm.additionalInstructions}\\n\\n` +\n//         `// Converted Code:\\n// Original ${codeConvForm.sourceLanguage} code has been converted to ${codeConvForm.destinationLanguage}\\n\\n` +\n//         `function convertedCode() {\\n  // Your converted code will appear here\\n  console.log('Code converted from ${codeConvForm.sourceLanguage} to ${codeConvForm.destinationLanguage}!');\\n}\\n\\nexport default convertedCode;`;\n      \n//       setCodeConvResult(mockResult);\n//       setCodeConvModalShow(true);\n      \n//       setNotification({\n//         show: true,\n//         body: \"Code converted successfully!\",\n//         type: 'success'\n//       });\n//     }, 2000);\n//   };\n\n//   const download = () =>{\n//     setLoader(true);\n//     axios.post(`http://10.31.3.17:5000/download-test-cases`, [], {\n//             responseType: 'blob'\n          \n//         }).then(res => {\n//                 setLoader(false);\n//                 if(res.status === 200){\n//                   const url = window.URL.createObjectURL(new Blob([res.data], {type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"}));\n//                   const link = document.createElement('a');\n//                   link.href = url;\n//                   link.setAttribute('download', 'test_cases.xlsx'); // Name of the file to be downloaded\n//                   document.body.appendChild(link);\n//                   link.click();\n//                   link.remove();\n//                   setNotification({\n//                     show:true,\n//                     body:\"Downloaded Successfully\",\n//                     type:'success'\n//                   })\n//                 }else{\n//                   setNotification({\n//                     show:true,\n//                     body:\"Something went wrong !!\",\n//                     type:'danger'\n//                   })\n//                 }\n                \n//               })\n//   }\n//   const [responseShow, setResponseShow] = useState(false);\n\n//   const handleResClose = () => setResponseShow(false);\n//   const handleCodeGenClose = () => setCodeGenModalShow(false);\n//   const handleCodeConvClose = () => setCodeConvModalShow(false);\n\n//   // Code Generation Content Component\n//   const CodeGenerationContent = () => (\n//     <div className=\"code-generation-content\">\n//       <form className=\"code-tab-form\" onSubmit={handleCodeGenSubmit}>\n//         {/* Row with two dropdowns */}\n//         <div className=\"formRow\">\n//           <div>\n//             <label className=\"formLabel\">Select Technology Type:</label>\n//             <select\n//               className=\"formfield_select input_dark\"\n//               value={codeGenForm.technologyType}\n//               onChange={(e) => handleTechnologyChange(e.target.value)}\n//               required\n//             >\n//               <option value=\"\">Select Technology Type</option>\n//               <option value=\"Frontend\">Frontend</option>\n//               <option value=\"Backend\">Backend</option>\n//               <option value=\"Database\">Database</option>\n//             </select>\n//           </div>\n//           <div>\n//             <label className=\"formLabel\">Select Framework/Code Language:</label>\n//             <select\n//               className=\"formfield_select input_dark\"\n//               value={codeGenForm.framework}\n//               onChange={(e) => setCodeGenForm({...codeGenForm, framework: e.target.value})}\n//               required\n//               disabled={!codeGenForm.technologyType}\n//             >\n//               <option value=\"\">Select Framework/Language</option>\n//               {codeGenForm.technologyType && frameworkOptions[codeGenForm.technologyType].map((option, index) => (\n//                 <option key={index} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//         </div>\n        \n//         {/* Repository URL field */}\n//         <div>\n//           <label className=\"formLabel\">Repository Url/Name:</label>\n//           <input\n//             type=\"text\"\n//             className=\"formfield_select input_dark\"\n//             value={codeGenForm.repositoryUrl}\n//             onChange={(e) => setCodeGenForm({...codeGenForm, repositoryUrl: e.target.value})}\n//             placeholder=\"Enter repository URL or name...\"\n//           />\n//         </div>\n        \n//         {/* User Requirement field */}\n//         <div>\n//           <label className=\"formLabel\">User Requirement:</label>\n//           <textarea\n//             className=\"formfield_ta input_dark\"\n//             value={codeGenForm.userRequirement}\n//             onChange={(e) => setCodeGenForm({...codeGenForm, userRequirement: e.target.value})}\n//             placeholder=\"Enter your requirements...\"\n//             required\n//             rows=\"8\"\n//           />\n//         </div>\n        \n//         {/* Generate button */}\n//         <div>\n//           <button type=\"submit\" className=\"btn btn-primary formButton\">\n//             Generate\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n\n//   // Code Conversion Content Component\n//   const CodeConversionContent = () => (\n//     <div className=\"code-conversion-content\">\n//       <form className=\"code-tab-form\" onSubmit={handleCodeConvSubmit}>\n//         {/* Technology Type dropdown */}\n//         <div>\n//           <label className=\"formLabel\">Select Technology Type:</label>\n//           <select\n//             className=\"formfield_select input_dark\"\n//             value={codeConvForm.technologyType}\n//             onChange={(e) => handleConvTechnologyChange(e.target.value)}\n//             required\n//           >\n//             <option value=\"\">Select Technology Type</option>\n//             <option value=\"Frontend\">Frontend</option>\n//             <option value=\"Backend\">Backend</option>\n//             <option value=\"Database\">Database</option>\n//           </select>\n//         </div>\n\n//         {/* Row with Source and Destination Language dropdowns */}\n//         <div className=\"formRow\">\n//           <div>\n//             <label className=\"formLabel\">Source Language:</label>\n//             <select\n//               className=\"formfield_select input_dark\"\n//               value={codeConvForm.sourceLanguage}\n//               onChange={(e) => handleSourceLanguageChange(e.target.value)}\n//               required\n//               disabled={!codeConvForm.technologyType}\n//             >\n//               <option value=\"\">Select Source Language</option>\n//               {codeConvForm.technologyType && frameworkOptions[codeConvForm.technologyType].map((option, index) => (\n//                 <option key={index} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div>\n//             <label className=\"formLabel\">Destination Language:</label>\n//             <select\n//               className=\"formfield_select input_dark\"\n//               value={codeConvForm.destinationLanguage}\n//               onChange={(e) => setCodeConvForm({...codeConvForm, destinationLanguage: e.target.value})}\n//               required\n//               disabled={!codeConvForm.sourceLanguage}\n//             >\n//               <option value=\"\">Select Destination Language</option>\n//               {getDestinationOptions().map((option, index) => (\n//                 <option key={index} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//         </div>\n        \n//         {/* Repository URL field */}\n//         <div>\n//           <label className=\"formLabel\">Repository Url/Name:</label>\n//           <input\n//             type=\"text\"\n//             className=\"formfield_select input_dark\"\n//             value={codeConvForm.repositoryUrl}\n//             onChange={(e) => setCodeConvForm({...codeConvForm, repositoryUrl: e.target.value})}\n//             placeholder=\"Enter repository URL or name...\"\n//           />\n//         </div>\n        \n//         {/* Additional Instructions field - MADE SHORTER */}\n//         <div>\n//           <label className=\"formLabel\">Add Your Additional Instructions:</label>\n//           <textarea\n//             className=\"formfield_select input_dark\"\n//             value={codeConvForm.additionalInstructions}\n//             onChange={(e) => setCodeConvForm({...codeConvForm, additionalInstructions: e.target.value})}\n//             placeholder=\"Enter your additional instructions...\"\n//             rows=\"3\"\n//             style={{height: 'auto', minHeight: '80px'}}\n//           />\n//         </div>\n        \n//         {/* Convert button */}\n//         <div>\n//           <button type=\"submit\" className=\"btn btn-primary formButton\">\n//             Convert\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n\n//   console.log(loader,\"loader\")\n//   return (\n//     <>\n//       <Header />\n//       <Toast className=\"d-inline-block m-1 toast\" bg={notification.type} onClose={() => setNotification(prevState =>( { ...prevState,show:false }))} show={notification.show} position=\"top-end\" autohide>\n//         <Toast.Header>\n//           <strong className=\"me-auto\">Success</strong>\n//         </Toast.Header>\n//         <Toast.Body className='text-white'>{notification.body}</Toast.Body>\n//       </Toast>\n\n//       {/* Main Tab Navigation */}\n//       <div className=\"main-tabs\">\n//         <ul className=\"nav nav-tabs\">\n//           <li className=\"nav-item\">\n//             <button \n//               className={`nav-link ${activeTab === 'test-case-generation' ? 'active' : ''}`}\n//               onClick={() => setActiveTab('test-case-generation')}\n//             >\n//               Test Case Generation\n//             </button>\n//           </li>\n//           <li className=\"nav-item\">\n//             <button \n//               className={`nav-link ${activeTab === 'code-generation' ? 'active' : ''}`}\n//               onClick={() => setActiveTab('code-generation')}\n//             >\n//               Code Generation\n//             </button>\n//           </li>\n//           <li className=\"nav-item\">\n//             <button \n//               className={`nav-link ${activeTab === 'code-conversion' ? 'active' : ''}`}\n//               onClick={() => setActiveTab('code-conversion')}\n//             >\n//               Code Conversion\n//             </button>\n//           </li>\n//         </ul>\n//       </div>\n\n//       {/* Tab Content */}\n//       <div className=\"tab-content-wrapper\">\n//         {activeTab === 'test-case-generation' && (\n//           <div className=\"test-case-gen-content\">\n//             <FileUpload handleSubmit={handleSubmit} setNotification={setNotification} />\n//           </div>\n//         )}\n//         {activeTab === 'code-generation' && <CodeGenerationContent />}\n//         {activeTab === 'code-conversion' && <CodeConversionContent />}\n//       </div>\n\n//       {loader && (<div style={{position: \"absolute\",width: \"100vw\",height: \"100vh\",zIndex: 30,top: 0,'backgroundColor': \"#00000082\"}}>\n//         <div className=\"text-center mt-4\" style={{position: 'relative',top:'50%'}}>\n//           <Spinner animation=\"border\" role=\"status\">\n//             <span className=\"visually-hidden\">Loading...</span>\n//           </Spinner>\n//         </div>\n\n//       </div>)}\n//       {\n//         // (uploadedFiles.length)?<Response apiResponse={apiResponse}/> : <FileUpload uploadedFiles={uploadedFiles} setUploadedFiles={setUploadedFiles}/>\n//       }\n      \n//       {/* <!--Test Case Response Modal --> */}\n//       <Modal show={responseShow} size='xl' onHide={handleResClose} dialogClassName=\"formbody_dark modal_body\" backdrop=\"static\"\n//         keyboard={false}>\n//         <Modal.Header>\n//           <Modal.Title>\n//           <ul className=\"nav nav-tabs Restab\">\n//                 <li className=\"nav-item\">\n//                     <label className={\"nav-link\" + (resType === 'review'? \" active\":\"\")} aria-current=\"page\" onClick={e=>setResType('review')}>Review</label>\n//                 </li>\n//                 <li className=\"nav-item\">\n//                     <label className={\"nav-link\" + (resType === 'suggestions'? \" active\":\"\")} onClick={e=>setResType('suggestions')}>Suggestions</label>\n//                 </li>\n//             </ul>\n//           </Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//             {(resType === 'review') && <table className='resTable'>\n//                 <thead>\n//                     <tr>\n//                         <th>Title</th>\n//                         <th style={{width: '10%'}}>Test Step</th>\n//                         <th>Step Actions</th>\n//                         <th>Steps Expected</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {response.map((ele,key)=>{\n//                       return(<tr key={key}>\n//                         <td>{ele.Title}</td>\n//                         <td>{ele['Test Step']}</td>\n//                         <td>{ele['Step Action']}</td>\n//                         <td>{ele['Step Expected']}</td>\n//                       </tr>)\n//                     })}\n//                 </tbody>    \n//             </table>}\n//             {(resType === 'suggestions') && <div><pre className='textWrap'>{suggestions.map((e, index) => <React.Fragment key={index}>{e.suggestion + \"\\n\"}</React.Fragment>)}</pre></div>}\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <button className=\"btn btn-primary\" onClick={e=>download()}>\n//             Download\n//           </button>\n//           <button className=\"btn btn-secondary\" onClick={handleResClose}>\n//             Close\n//           </button>\n//         </Modal.Footer>\n//       </Modal>\n\n//       {/* Code Generation Result Modal */}\n//       <Modal show={codeGenModalShow} size='xl' onHide={handleCodeGenClose} dialogClassName=\"formbody_dark modal_body\" backdrop=\"static\" keyboard={false}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Code Generation Result</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <pre className='textWrap' style={{backgroundColor: '#1e1e1e', color: '#d4d4d4', padding: '20px', borderRadius: '5px', fontSize: '14px', fontFamily: 'Consolas, Monaco, monospace'}}>{codeGenResult}</pre>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <button className=\"btn btn-secondary\" onClick={handleCodeGenClose}>\n//             Close\n//           </button>\n//         </Modal.Footer>\n//       </Modal>\n\n//       {/* Code Conversion Result Modal */}\n//       <Modal show={codeConvModalShow} size='xl' onHide={handleCodeConvClose} dialogClassName=\"formbody_dark modal_body\" backdrop=\"static\" keyboard={false}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Code Conversion Result</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <pre className='textWrap' style={{backgroundColor: '#1e1e1e', color: '#d4d4d4', padding: '20px', borderRadius: '5px', fontSize: '14px', fontFamily: 'Consolas, Monaco, monospace'}}>{codeConvResult}</pre>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <button className=\"btn btn-secondary\" onClick={handleCodeConvClose}>\n//             Close\n//           </button>\n//         </Modal.Footer>\n//       </Modal>\n\n//       <Footer></Footer>\n//     </>\n//   );\n// }\n\n// export default App;\n\n\nimport React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello, React!</h1>\n      <p>This is a basic React app.</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappingszB,MAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnB,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,mBACED,KAAA,QAAKE,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBL,IAAA,OAAAK,QAAA,CAAI,eAAa,CAAI,CAAC,cACtBL,IAAA,MAAAK,QAAA,CAAG,4BAA0B,CAAG,CAAC,EAC9B,CAAC,CAEV,CAEA,cAAe,CAAAF,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}